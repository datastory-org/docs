{
  "openapi": "3.1.0",
  "info": {
    "title": "Datastory API",
    "version": "1"
  },

  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/table": {
      "post": {
        "operationId": "create",
        "summary": "Creat a new ApiToken",
        "description": "Creates a new ApiToken. The ApiToken is returned, including its `token` field, which you should record for future reference. **Be careful, this token is only returned once, when the token is created.**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenCreateInput"
              },
              "examples": {
                "ProductionTokenExample": {
                  "value": {
                    "name": "Production API Token",
                    "expires_at": "2025-01-01T00:00:00Z"
                  },
                  "summary": "Long-lived token for production use"
                },
                "BrowserSessionExample": {
                  "value": {
                    "name": "Browser Session Token"
                  },
                  "summary": "Token without expiration (use with caution)"
                },
                "TemporaryAccessExample": {
                  "value": {
                    "name": "Temporary Access Token",
                    "expires_at": "2023-12-31T23:59:59Z"
                  },
                  "summary": "Short-lived token for temporary access"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created ApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/observations/fetch": {
      "post": {
        "operationId": "getObservations",
        "summary": "Fetch observations data",
        "description": "Retrieves observational data for a specific cube and measure with filtering and pagination capabilities.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["cube_id", "measure_id"],
                "properties": {
                  "cube_id": {
                    "type": "string",
                    "description": "Identifier for the specific data cube"
                  },
                  "measure_id": {
                    "type": "string",
                    "description": "Identifier for the measure to analyze"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 10000,
                    "description": "Maximum number of records to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "description": "Number of records to skip for pagination"
                  },
                  "observationOutput": {
                    "type": "string",
                    "default": "default",
                    "enum": ["default", "detailed"],
                    "description": "Level of detail in response"
                  },
                  "filters": {
                    "type": "object",
                    "description": "Filter criteria including deep filters",
                    "properties": {
                      "dimensions": {
                        "type": "object",
                        "description": "Direct dimension filters"
                      },
                      "deepFilters": {
                        "type": "object",
                        "description": "Nested filters requiring item lookups"
                      }
                    }
                  },
                  "sort": {
                    "type": "object",
                    "description": "Sorting parameters for results"
                  }
                }
              },
              "examples": {
                "BasicExample": {
                  "value": {
                    "cube_id": "customer_behavior",
                    "measure_id": "purchase_frequency",
                    "limit": 5000
                  },
                  "summary": "Basic observation fetch with default output"
                },
                "FilteredExample": {
                  "value": {
                    "cube_id": "inventory",
                    "measure_id": "stock_level",
                    "filters": {
                      "dimensions": {
                        "warehouse_id": ["north", "south"]
                      },
                      "deepFilters": {
                        "product_category": {
                          "name": { "_eq": "Electronics" }
                        }
                      }
                    },
                    "sort": {
                      "timestamp": "desc"
                    }
                  },
                  "summary": "Filtered and sorted observation request"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved observations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cubes/create": {
      "post": {
        "operationId": "createCube",
        "summary": "Create a new data cube",
        "description": "Creates a new data cube with specified dimensions. Handles dimension ordering, existing cube checks, and schema setup.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CubeCreateInput"
              },
              "examples": {
                "MultiDimensionExample": {
                  "value": {
                    "dimensions": [
                      "country",
                      "product_category",
                      "time_period"
                    ],
                    "workspace_id": "ws_12345"
                  },
                  "summary": "Cube with multiple dimensions"
                },
                "SingleDimensionExample": {
                  "value": {
                    "dimensions": ["customer_segment"],
                    "workspace_id": "ws_67890"
                  },
                  "summary": "Single dimension cube"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created cube",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cube"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/export": {
      "post": {
        "operationId": "exportData",
        "summary": "Export data from specified measures and collections",
        "description": "Initiates a bulk export of data from specified measures and collections. Returns an export job ID and status.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["measure_ids", "collection_ids"],
                "properties": {
                  "measure_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of measure IDs to include in export"
                  },
                  "collection_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of collection IDs to include in export"
                  },
                  "format": {
                    "type": "string",
                    "enum": ["csv", "json", "xlsx"],
                    "default": "csv",
                    "description": "Output format for the exported data"
                  },
                  "include_metadata": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to include schema metadata in export"
                  }
                }
              },
              "examples": {
                "BasicExport": {
                  "value": {
                    "measure_ids": ["meas_123", "meas_456"],
                    "collection_ids": ["coll_789", "coll_012"],
                    "format": "csv"
                  },
                  "summary": "Basic CSV export request"
                },
                "MetadataExport": {
                  "value": {
                    "measure_ids": ["meas_345"],
                    "collection_ids": ["coll_678"],
                    "format": "json",
                    "include_metadata": true
                  },
                  "summary": "JSON export with metadata"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Export job initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/items/upsert": {
      "post": {
        "summary": "Upsert Items",
        "description": "Create or update multiple items in a single operation. Items are matched using a specified key (matchOn) - if a match is found, the item is updated; if no match is found, a new item is created. The operation is atomic: all items are either processed successfully or none are.",
        "operationId": "upsertItems",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/ItemInput" }
                  },
                  "matchOn": {
                    "type": "string",
                    "description": "The key used to match items with existing records. Can be a db-optimized property (e.g., id) or a statement property (e.g., iso2). If both a top-level property and a property in the properties array are present, the top-level property takes precedence.",
                    "default": "id"
                  },
                  "preserveResponse": {
                    "type": "boolean",
                    "description": "Return raw database response instead of formatted items.",
                    "default": false
                  }
                },
                "required": ["data"]
              },
              "examples": {
                "Match by ID": {
                  "summary": "Using default id key",
                  "value": {
                    "data": [
                      {
                        "id": "sweden",
                        "class_id": "Country",
                        "workspace_id": "open_data",
                        "properties": [
                          {
                            "id": "name",
                            "statements": [{ "data_value": { "en": "Sweden" } }]
                          },
                          {
                            "id": "iso2",
                            "statements": [{ "data_value": "SE" }]
                          },
                          {
                            "id": "population",
                            "statements": [{ "data_value": 10400000 }]
                          }
                        ]
                      }
                    ]
                  }
                },
                "Match by Statement": {
                  "summary": "Using custom statement property",
                  "value": {
                    "data": [
                      {
                        "class_id": "Country",
                        "workspace_id": "open_data",
                        "properties": [
                          {
                            "id": "name",
                            "statements": [{ "data_value": { "en": "Sweden" } }]
                          },
                          {
                            "id": "iso2",
                            "statements": [{ "data_value": "SE" }]
                          },
                          {
                            "id": "population",
                            "statements": [{ "data_value": 10400000 }]
                          }
                        ]
                      }
                    ],
                    "matchOn": "iso2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upserted items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          { "$ref": "#/components/schemas/FormattedItem" },
                          { "$ref": "#/components/schemas/Item" }
                        ]
                      }
                    }
                  },
                  "required": ["items"]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    },
    "schemas": {
      "ApiToken": {
        "type": "object",
        "description": "An ApiToken is a unique identifier that you can use to authenticate requests to the API. You can create as many ApiTokens as you need.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "readOnly": true,
            "example": "api_token"
          },
          "id": {
            "type": "string",
            "description": "This is the internal ID for this ApiToken. You don't need to record this information, since you will not need to use it.",
            "readOnly": true
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user that created this ApiToken.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the ApiToken.",
            "example": "Production API Token"
          },
          "from_browser": {
            "type": "boolean",
            "description": "Whether this ApiToken was created from the browser.",
            "readOnly": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time this ApiToken was used.",
            "readOnly": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time this ApiToken expires."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the object was last updated.",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "description": "The actual token that you will use to authenticate your requests. > **Be careful, this token is only returned once, when the token is created.**",
            "readOnly": true
          }
        }
      },
      "ApiTokenCreateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiToken"
          }
        ],
        "required": ["name"]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Error response from the API",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Missing required parameter `class_id`"
          }
        },
        "required": ["error"]
      },
      "Cube": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cube_gdp_per_capita"
          },
          "name": {
            "type": "string",
            "example": "Country, Year, GDP per Capita (PPP)",
            "description": "Automatically generated name from development dimensions"
          },
          "workspace_id": {
            "type": "string",
            "description": "Workspace where the cube is created",
            "example": "ws_12345"
          },
          "cube_dimensions_count": {
            "type": "integer",
            "description": "Number of dimensions in the cube",
            "example": 3
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of cube creation"
          }
        }
      },
      "CubeCreateInput": {
        "type": "object",
        "required": ["dimensions", "workspace_id"],
        "properties": {
          "dimensions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of property IDs representing development indicators",
            "example": ["country", "year", "income_level"],
            "minItems": 1
          },
          "workspace_id": {
            "type": "string",
            "description": "Workspace ID for development data analysis",
            "example": "global_dev_2023"
          }
        }
      },
      "ExportResponse": {
        "type": "object",
        "properties": {
          "export_id": {
            "type": "string",
            "description": "Unique identifier for the export job",
            "example": "export_12345"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "processing", "completed", "failed"],
            "default": "pending",
            "description": "Current status of the export job"
          },
          "download_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to download completed export (available when status=completed)",
            "example": "https://api.example.com/exports/export_12345.csv"
          },
          "estimated_duration": {
            "type": "integer",
            "description": "Estimated processing time in seconds",
            "example": 60
          }
        }
      },
      "ItemInput": {
        "type": "object",
        "properties": {
          "class_id": { "type": "string" },
          "workspace_id": { "type": "string" },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialFormattedItemProperty"
            }
          }
        },
        "additionalProperties": true,
        "required": ["class_id", "workspace_id"]
      },
      "DataValueItem": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              { "type": "string" }
            ]
          },
          "slug": { "type": "string" }
        },
        "required": ["id", "name", "slug"]
      },
      "DataValue": {
        "oneOf": [
          { "$ref": "#/components/schemas/DataValueItem" },
          { "type": "number" },
          { "type": "string" },
          { "type": "boolean" },
          { "type": "object", "additionalProperties": true },
          { "type": "object", "additionalProperties": { "type": "string" } },
          { "type": "null" }
        ]
      },
      "FormattedItemStatementBase": {
        "type": "object",
        "properties": {
          "data_value": { "$ref": "#/components/schemas/DataValue" },
          "id": { "type": "string" },
          "qualifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormattedItemStatementQualifier"
            }
          }
        },
        "required": ["data_value"]
      },
      "FormattedItemStatementQualifier": {
        "type": "object",
        "properties": {
          "data_value": { "$ref": "#/components/schemas/DataValue" },
          "id": { "type": "string" }
        },
        "required": ["data_value"]
      },
      "FormattedItemStatement": {
        "allOf": [
          { "$ref": "#/components/schemas/FormattedItemStatementBase" },
          {
            "type": "object",
            "properties": {
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormattedItemProperty"
                }
              }
            }
          }
        ]
      },
      "FormattedItemProperty": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormattedItemStatementBase"
            }
          },
          "schema": { "$ref": "#/components/schemas/ClassPropertySchema" }
        },
        "required": ["id", "statements", "schema"]
      },
      "FormattedItem": {
        "title": "FormattedItem",
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "properties": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FormattedItemProperty" }
          }
        },
        "required": ["id", "properties"]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": {
            "type": "object",
            "properties": {
              "en": { "type": "string" }
            },
            "additionalProperties": { "type": "string" },
            "required": ["en"]
          },
          "nameEn": { "type": "string" },
          "slug": { "type": "string" },
          "class": {
            "type": "object",
            "properties": {
              "nameEn": { "type": "string" }
            },
            "required": ["nameEn"]
          },
          "workspace": {
            "type": "object",
            "properties": {
              "nameEn": { "type": "string" }
            },
            "required": ["nameEn"]
          },
          "class_id": { "type": "string" },
          "workspace_id": { "type": "string" },
          "publication_status": {
            "type": ["string", "null"]
          },
          "semantic_type_id": { "type": "string" },
          "postgres_column": { "type": "string" }
        },
        "required": [
          "id",
          "name",
          "nameEn",
          "slug",
          "class",
          "workspace",
          "class_id",
          "workspace_id",
          "semantic_type_id",
          "postgres_column"
        ]
      },
      "ClassPropertySchema": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "class_id": { "type": "string" },
          "inherited_from_id": { "type": ["string", "null"] },
          "is_db_optimized": { "type": ["boolean", "null"] },
          "is_system_property": { "type": ["boolean", "null"] },
          "is_single": { "type": "boolean" },
          "max_count": { "type": ["number", "null"] },
          "min_count": { "type": ["number", "null"] },
          "position": { "type": ["number", "null"] },
          "postgres_column": { "type": "string" },
          "property_id": { "type": "string" },
          "required": { "type": "boolean" },
          "semantic_type_id": { "type": "string" },
          "settings": {
            "oneOf": [
              { "type": "object", "additionalProperties": true },
              { "type": "null" }
            ]
          },
          "value_classes": {
            "oneOf": [
              { "type": "array", "items": { "type": "string" } },
              { "type": "null" }
            ]
          },
          "property_name": {
            "type": "object",
            "properties": {
              "en": { "type": "string" }
            },
            "required": ["en"]
          },
          "inverse_of_id": { "type": ["string", "null"] },
          "dimension_type_id": { "type": ["string", "null"] }
        },
        "required": [
          "id",
          "class_id",
          "is_single",
          "postgres_column",
          "property_id",
          "required",
          "semantic_type_id",
          "property_name"
        ]
      }
    }
  }
}
